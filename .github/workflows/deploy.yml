name: Build Apps

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions: write-all

env:
  MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
  MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
  MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
  MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
  APP_NAME: myapp

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            build_cmd: flutter build apk --release
            artifact_path: ${APP_NAME}/build/app/outputs/flutter-apk/app-release.apk
            artifact_ext: apk

          - os: macos-latest
            platform: darwin
            build_cmd: flutter build macos --release
            artifact_path: ${APP_NAME}/build/macos/Build/Products/Release/${APP_NAME}.app
            artifact_ext: zip

          - os: windows-latest
            platform: windows
            build_cmd: flutter build windows --release
            artifact_path: ${APP_NAME}\build\windows\x64\runner\Release
            artifact_ext: tar.gz

    steps:
      # - name: s
      #   run: |
      #     echo ${{ env.APP_NAME }}
          
      - name: Setup MinIO client
        if: runner.os != 'Windows'
        uses: yakubique/setup-minio-cli@v1

      # Windows: 下载 mc.exe
      - name: Download mc.exe for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://dl.min.io/client/mc/release/windows-amd64/mc.exe" -OutFile "mc.exe"

      # 配置 MinIO 客户端
      - name: Configure MinIO client
        shell: pwsh
        run: |
          if ($IsWindows) {
            ./mc.exe alias set myminio ${{ secrets.MINIO_ENDPOINT }} ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}
          } else {
            mc alias set myminio ${{ secrets.MINIO_ENDPOINT }} ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}
          }

      # 从 MinIO 下载代码
      - name: Download code from MinIO
        shell: pwsh
        run: |
          if ($IsWindows) {
            try {
              ./mc.exe cp "myminio/${{ secrets.MINIO_BUCKET }}/code.tar.gz" "./code.tar.gz"
              if (-not (Test-Path "code.tar.gz")) { exit 1 }
            } catch {
              $_
              exit 1
            }
          } else {
            mc cp myminio/${{ secrets.MINIO_BUCKET }}/code.tar.gz ./
          }

      # 解压代码
      - name: Extract code
        shell: pwsh
        run: |
          if ($IsWindows) {
            if (Test-Path "code.tar.gz") {
              tar -xf code.tar.gz
              Remove-Item code.tar.gz
            } else {
              $_
              exit 1
            }
          } else {
            tar -xzf code.tar.gz
            rm code.tar.gz
          }

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'

      - name: Flutter pub get
        run: flutter pub get
        working-directory: ${{ env.APP_NAME }}

      - name: Build app
        run: ${{ matrix.build_cmd }}
        working-directory: ${{ env.APP_NAME }}

      # 非 Windows: 处理 artifact
      - name: Prepare artifact (Unix/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p dist
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          OS_NAME=${{ matrix.platform }}
          FILE_NAME="${OS_NAME}_${TIMESTAMP}.${{ matrix.artifact_ext }}"

          if [ "${{ matrix.artifact_ext }}" = "zip" ]; then
            cd "${{ matrix.artifact_path}}/.."
            zip -r "../../../../../../dist/$FILE_NAME" "${APP_NAME}.app"
          else
            cp "${{ matrix.artifact_path }}" "dist/$FILE_NAME"
          fi

      # Windows: 处理 artifact
      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # mkdir -p test
          # "123" | Out-File -FilePath "test\test3.txt"
          # Compress-Archive -Path ".\test" -DestinationPath "D:\a\app\app\dist\a.zip" -Force
          # #tar -zcvf .\dist\testwindows.tar.gz test
          # ./mc.exe cp --debug --recursive ".\dist\" "myminio/${{ secrets.MINIO_BUCKET }}/dist/"
          mkdir -p dist
          $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
          $os = "${{ matrix.platform }}"
          $ext = "${{ matrix.artifact_ext }}"
          $fileName = "${os}_${timestamp}.${ext}"
          tar -zcvf .\dist\$fileName -C "${{ matrix.artifact_path }}" .

      # 上传到 MinIO
      - name: Upload to MinIO
        shell: pwsh
        run: |
          if ($IsWindows) {
            ./mc.exe cp  --recursive ".\dist\" "myminio/${{ secrets.MINIO_BUCKET }}/dist/"
          } else {
            mc cp --recursive ./dist/ myminio/${{ secrets.MINIO_BUCKET }}/dist/
          }
