name: Build Apps

on:
  workflow_dispatch:
    inputs:
      url:
        description: "要处理的URL"
        required: false
        default: ""
  push:
    branches:
      - main

permissions: write-all

env:
  APP_DIRNAME: app

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #   platform: linux
          #   artifact_path: app/build/app/outputs/flutter-apk/app-release.apk
          #   artifact_ext: apk
          #           - os: macos-latest
          #             platform: darwin
          #             artifact_path: app/build/macos/Build/Products/Release/${APP_DIRNAME}.app
          #             artifact_ext: zip
          - os: windows-latest
            platform: windows
            artifact_path: app\build\windows\x64\runner\Release
            artifact_ext: zip

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Get Build Configuration
        run: |
          curl -qs "${{ secrets.API_ASSETS_URL }}/parse_env.js" -o parse_env.js
          node parse_env.js "${{ secrets.API_BUILD_URL }}"
      - name: Setup MinIO client
        if: runner.os != 'Windows'
        uses: yakubique/setup-minio-cli@v1

      # Windows: 下载 mc.exe
      - name: Download mc.exe for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://dl.min.io/client/mc/release/windows-amd64/mc.exe" -OutFile "mc.exe"

      # 配置 MinIO 客户端
      - name: Configure MinIO client
        shell: pwsh
        run: |
          if ($IsWindows) {
            ./mc.exe alias set myminio ${{ env.MINIO_ENDPOINT }} ${{ env.MINIO_ACCESS_KEY }} ${{ env.MINIO_SECRET_KEY }}
          } else {
            mc alias set myminio ${{ env.MINIO_ENDPOINT }} ${{ env.MINIO_ACCESS_KEY }} ${{ env.MINIO_SECRET_KEY }}
          }

      # 从 MinIO 下载代码
      - name: Download code from MinIO
        shell: pwsh
        run: |
          env
          if ($IsWindows) {
            try {
              ./mc.exe cp "myminio/${{ env.MINIO_BUCKET }}/source/vp/code.tar.gz" "./code.tar.gz"
              if (-not (Test-Path "code.tar.gz")) { exit 1 }
            } catch {
              $_
              exit 1
            }
          } else {
            mc cp myminio/${{ env.MINIO_BUCKET }}/source/vp/code.tar.gz ./
          }

      # 解压代码
      - name: Extract code
        shell: pwsh
        run: |
          if ($IsWindows) {
            if (Test-Path "code.tar.gz") {
              7z x code.tar.gz
              7z x code.tar
              Remove-Item code.tar.gz
              Remove-Item code.tar
            } else {
              $_
              exit 1
            }
          } else {
            tar -xzf code.tar.gz
            rm code.tar.gz
          }
          mv app base_app
      - name: Install MinGW-w64
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # 下载指定版本的MinGW-w64
          Invoke-WebRequest -Uri "https://github.com/niXman/mingw-builds-binaries/releases/download/15.1.0-rt_v12-rev0/x86_64-15.1.0-release-posix-seh-ucrt-rt_v12-rev0.7z" -OutFile "mingw-w64.7z"

          # 创建目标文件夹
          $mingwPath = "C:\a\mingw64"
          if (!(Test-Path $mingwPath)) {
              New-Item -Path $mingwPath -ItemType Directory
          }

          # 解压文件
          7z x mingw-w64.7z -o"$mingwPath" -y

          # 设置环境变量
          echo "MinGW_HOME=$mingwPath" >> $env:GITHUB_ENV
          echo "$mingwPath\bin" >> $env:GITHUB_PATH

          # 验证安装
          gcc -v
      - name: Setup Go 1.24
        if: runner.os == 'Windows'
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Compile libclash.dll
        if: runner.os == 'Windows'
        working-directory: clash_flt2/fclash
        shell: pwsh
        run: |
          chmod a+x ./build_libclash_win.sh
          bash ./build_libclash_win.sh

          Copy-Item -Path "dist/libclash.dll" -Destination "${{ github.workspace }}\base_app\windows\"
          #ls "${{ github.workspace }}\base_app\windows\"
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.5"
          channel: "stable"

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      - name: Install Inno Setup
        if: runner.os == 'Windows'
        run: |
          $ErrorActionPreference = "Stop"
          $url = "https://jrsoftware.org/download.php/is.exe"
          $output = "$env:TEMP\innosetup.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -Wait -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/SP-"
          echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Download Inno Setup Simplified Chinese Language File
        if: runner.os == 'Windows'
        run: |
          $ErrorActionPreference = "Stop"

          $langDir = "C:\Program Files (x86)\Inno Setup 6\Languages"
          if (!(Test-Path $langDir)) {
            Write-Error "Inno Setup not found at expected path: $langDir"
            exit 1
          }

          Invoke-WebRequest `
            -Uri "https://raw.githubusercontent.com/kira-96/Inno-Setup-Chinese-Simplified-Translation/main/ChineseSimplified.isl" `
            -OutFile "$langDir\ChineseSimplified.isl"

          Write-Host "Downloaded ChineseSimplified.isl to $langDir"

      - name: Install ImageMagick
        if: runner.os == 'Windows'
        run: |
          $url = "https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-47-Q16-x64-static.exe"
          $installer = "$env:RUNNER_TEMP\\ImageMagick.exe"

          # 下载安装包
          Invoke-WebRequest -Uri $url -OutFile $installer

          # 静默安装
          Start-Process -FilePath $installer -ArgumentList '/VERYSILENT','/NORESTART','/MERGETASKS="assoc,installlegacyutils,addtopath"' -Wait

          # 测试命令
          magick -version
      - name: Build app
        shell: bash
        run: |
          curl -qs "${{ secrets.API_ASSETS_URL }}/build.sh" -o ./base_app/.gitea/workflows/assets/build.sh
          chmod a+x ./base_app/.gitea/workflows/assets/build.sh
          ./base_app/.gitea/workflows/assets/build.sh ${{ matrix.platform }}
      # 非 Windows: 处理 artifact
      - name: Prepare artifact (Unix/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p dist
          OS_NAME=${{ matrix.platform }}
          FILE_NAME="${APP_NAME}_${APP_DIGITAL_VERSION}.${{ matrix.artifact_ext }}"
          if [ "${{ matrix.artifact_ext }}" = "zip" ]; then
            cd "${{ matrix.artifact_path}}/.."
            zip -r "../../../../../../dist/$FILE_NAME" "${APP_NAME_ZH}.app"
          else
            cp "${{ matrix.artifact_path }}" "dist/$FILE_NAME"
          fi
      - name: Inno Setup
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cp ".\app\build\windows\x64\runner\Release\vp.exe" ".\app\build\windows\x64\runner\Release\${{ env.APP_NAME_ZH }}.exe"
          ISCC.exe /DMyAppExeName="${{ env.APP_NAME_ZH }}.exe" /DMyAppVersion="${{ env.APP_VERSION }}" /DMyAppName="${{ env.APP_NAME_ZH }}" .\app\AssembleWinSetup.iss
      - name: Get built EXE full path and save to EXE_FILE
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $exe = Get-ChildItem "${{ matrix.artifact_path }}\..\" -Filter *.exe | Select-Object -First 1
          if (-not $exe) {
            Write-Error "No .exe file found in the runner directory."
            exit 1
          }

          $exePath = $exe.FullName
          echo "EXE_FILE=$exePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Host "Found EXE full path: $exePath"

      # Windows: 处理 artifact
      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir -p dist
          mkdir -p tmp

          $ext = "${{ matrix.artifact_ext }}"
          $fileName = "${{ env.APP_NAME }}_${{ env.APP_DIGITAL_VERSION }}_${{ matrix.platform }}.${ext}"
          $newExe = "${{ env.APP_NAME }}_${{ env.APP_DIGITAL_VERSION }}.exe"
          Copy-Item -Path "${{ env.EXE_FILE }}" -Destination ".\tmp\${newExe}"
          Copy-Item -Path ".\app\assets\windows\*" -Destination ".\tmp\"
          Compress-Archive -Path ".\tmp\*" -DestinationPath ".\dist\${fileName}" -Force
      # 上传到 MinIO
      - name: Upload to MinIO
        shell: pwsh
        run: |
          if ($IsWindows) {
            "${{ env.APP_DIGITAL_VERSION }}" > .\${{ env.APP_NAME }}_${{ matrix.platform }}_build_version
            ./mc.exe cp --recursive ".\dist\" "myminio/${{ env.MINIO_BUCKET }}/release/vp/"
            ./mc.exe cp "${{ env.APP_NAME }}_${{ matrix.platform }}_build_version" "myminio/${{ env.MINIO_BUCKET }}/release/"
          } else {
            echo "${{ env.APP_DIGITAL_VERSION }}" > ${{ env.APP_NAME }}_${{ matrix.platform }}_build_version
            mc cp --recursive ./dist/ myminio/${{ env.MINIO_BUCKET }}/release/vp/
            mc cp "${{ env.APP_NAME }}_${{ matrix.platform }}_build_version" myminio/${{ env.MINIO_BUCKET }}/release/
          }
